// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	discordgo "github.com/bwmarrin/discordgo"
	mock "github.com/stretchr/testify/mock"
)

// DataAccessLayer is an autogenerated mock type for the DataAccessLayer type
type DataAccessLayer struct {
	mock.Mock
}

// ChannelMessage provides a mock function with given fields: channelID, messageID
func (_m *DataAccessLayer) ChannelMessage(channelID string, messageID string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageEditEmbed provides a mock function with given fields: channelID, messageID, embed
func (_m *DataAccessLayer) ChannelMessageEditEmbed(channelID string, messageID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, messageID, embed)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string, *discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, messageID, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, messageID, embed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSend provides a mock function with given fields: channelID, content
func (_m *DataAccessLayer) ChannelMessageSend(channelID string, content string) (*discordgo.Message, error) {
	ret := _m.Called(channelID, content)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, string) *discordgo.Message); ok {
		r0 = rf(channelID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelMessageSendEmbed provides a mock function with given fields: channelID, embed
func (_m *DataAccessLayer) ChannelMessageSendEmbed(channelID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	ret := _m.Called(channelID, embed)

	var r0 *discordgo.Message
	if rf, ok := ret.Get(0).(func(string, *discordgo.MessageEmbed) *discordgo.Message); ok {
		r0 = rf(channelID, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *discordgo.MessageEmbed) error); ok {
		r1 = rf(channelID, embed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DataAccessLayer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageReactionAdd provides a mock function with given fields: channelID, messageID, emojiID
func (_m *DataAccessLayer) MessageReactionAdd(channelID string, messageID string, emojiID string) error {
	ret := _m.Called(channelID, messageID, emojiID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(channelID, messageID, emojiID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageReactionsRemoveAll provides a mock function with given fields: channelID, messageID
func (_m *DataAccessLayer) MessageReactionsRemoveAll(channelID string, messageID string) error {
	ret := _m.Called(channelID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *DataAccessLayer) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: userID
func (_m *DataAccessLayer) User(userID string) (*discordgo.User, error) {
	ret := _m.Called(userID)

	var r0 *discordgo.User
	if rf, ok := ret.Get(0).(func(string) *discordgo.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*discordgo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
